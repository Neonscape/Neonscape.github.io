import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as p,d as c,e as a,a as n,b as s}from"./app-e94c24ec.js";const o={},i=a('<h2 id="博弈论" tabindex="-1"><a class="header-anchor" href="#博弈论" aria-hidden="true">#</a> 博弈论</h2><p>研究博弈论时，我们主要关注如下几个要素：</p><ul><li><code>S_0</code> 博弈开始时的初始状态。</li><li><code>To_Move(s)</code> 在状态<code>s</code>下，当前行动的参与者。这里的状态指的是整个博弈的状态。</li><li><code>Actions(s)</code> 在状态<code>s</code>下，全体合法移动的集合。</li><li><code>Result(s, a)</code> <strong>转移模型</strong>——在状态<code>s</code>下执行动作<code>a</code>所得到的结果状态。</li><li><code>Is_Terminal(s)</code> 终止测试——检测当前状态是否是博弈的结束状态。</li><li><code>Utility(s, p)</code> 效用函数，返回博弈结束时在终止状态<code>s</code>下参与者<code>p</code>得到的最终收益。</li></ul><h3 id="博弈搜索树" tabindex="-1"><a class="header-anchor" href="#博弈搜索树" aria-hidden="true">#</a> 博弈搜索树</h3><p>博弈搜索树代表两个智能体相互博弈的状态空间。搜索树中的每一层代表着博弈中某一方的行动。</p><p>在零和游戏的博弈过程中，参与博弈的双方都试图让对方的效用减小；也就是，对于某个特定的效用函数<code>U(s, p)</code>，在<code>p</code>行动时<code>p</code>会选择使得<code>U</code>最大的行动，而<code>p</code>的对手会选择让<code>U</code>最小的行动。</p><p>因此，我们需要研究极小化极大值（Minimax）。</p><h3 id="极小化极大搜索-minimax-search" tabindex="-1"><a class="header-anchor" href="#极小化极大搜索-minimax-search" aria-hidden="true">#</a> 极小化极大搜索(Minimax Search)</h3><p>极小化极大搜索中，搜索树从根节点开始分为两种节点层；其中一层试图最大化当前效用函数的取值，另一层试图最小化当前效用函数的取值。</p>',9),l=n("ul",null,[n("li",null,"完备性：是（如果搜索树有限）"),n("li",null,[s("时间："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"b"),n("mi",null,"m")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"\\Omicron(b^m)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathrm"},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"b"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6644em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"m")])])])])])])]),n("span",{class:"mclose"},")")])])]),s(" - 假设解的深度为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"d")]),n("annotation",{encoding:"application/x-tex"},"d")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal"},"d")])])])]),n("li",null,[s("空间："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"normal"},"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"b"),n("mi",null,"m"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"\\Omicron(bm)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathrm"},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"bm"),n("span",{class:"mclose"},")")])])]),s(" - "),n("code",null,"DFS")]),n("li",null,"代价最优：是（每一方每次都执行最优策略）")],-1),u=a(`<div class="hint-container info"><p class="hint-container-title">相关信息</p><p><strong>资源受限下的搜索</strong> 在真实的博弈当中，往往无法搜索到叶子节点。</p><p>因此，我们采用深度受限搜索，并对于非终止状态，采用评价函数来替代效用函数。</p></div><h2 id="α-β剪枝" tabindex="-1"><a class="header-anchor" href="#α-β剪枝" aria-hidden="true">#</a> α-β剪枝</h2><p>α-β剪枝的基本思想是剪掉不需要搜索的状态从而减少计算量。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXIMIZING_PLAYER</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MINIMIZING_PLAYER</span> <span class="token expression"><span class="token number">1</span></span></span>
T <span class="token function">minimax</span><span class="token punctuation">(</span>node current<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">,</span> <span class="token keyword">int</span> player<span class="token punctuation">,</span> T alpha<span class="token punctuation">,</span> T beta<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    T bestval<span class="token punctuation">,</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">isLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>player <span class="token operator">==</span> MAXIMIZING_PLAYER<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        bestval <span class="token operator">=</span> <span class="token operator">-</span>INF<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> child <span class="token operator">:</span> current<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ret <span class="token operator">=</span> <span class="token function">minimax</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
            bestval <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>bestval<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
            alpha <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>alpha<span class="token punctuation">,</span> bestval<span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token comment">// the maximizing player is guaranteed to </span>
            <span class="token comment">// gain at least *alpha* value from this move.</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>beta <span class="token operator">&lt;=</span> alpha<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token comment">// beta is not changed during this move;</span>
            <span class="token comment">// so beta is the minimum value </span>
            <span class="token comment">// the minimizing player can gain from last move.</span>
            <span class="token comment">// since the minimum gain of last step is already smaller than current maximum gain,</span>
            <span class="token comment">// this state will never be a valid solution.</span>
            <span class="token comment">// thus, this branch is pruned.</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bestval<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        bestval <span class="token operator">=</span> INF<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> child <span class="token operator">:</span> current<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ret <span class="token operator">=</span> <span class="token function">minimax</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
            bestval <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> bestval<span class="token punctuation">)</span><span class="token punctuation">;</span>
            beta <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>bestval<span class="token punctuation">,</span> beta<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>beta <span class="token operator">&lt;=</span> alpha<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bestval<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="heuristic-α-β-pruning" tabindex="-1"><a class="header-anchor" href="#heuristic-α-β-pruning" aria-hidden="true">#</a> heuristic α-β pruning</h3><p>当我们使用一个新的启发式评价函数取代当前的效用函数时，α-β剪枝转变为启发式α-β搜索。</p><p>该启发式搜索使用截断测试(cutoff test)来取代终止测试（是否为叶子节点），并对于之前的叶子节点（终止状态）必定返回真。</p><h2 id="expectimax-期望最大-搜索" tabindex="-1"><a class="header-anchor" href="#expectimax-期望最大-搜索" aria-hidden="true">#</a> expectimax（期望最大）搜索</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>\`\`\`cpp
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXIMIZING_PLAYER</span> <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PROBABILITY_PLAYER</span> <span class="token expression"><span class="token number">1</span></span></span>
T <span class="token function">minimax</span><span class="token punctuation">(</span>node current<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">,</span> <span class="token keyword">int</span> player<span class="token punctuation">,</span> T alpha<span class="token punctuation">,</span> T beta<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    T bestval<span class="token punctuation">,</span> ret<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span><span class="token function">isLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> current<span class="token punctuation">.</span>val<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>player <span class="token operator">==</span> MAXIMIZING_PLAYER<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        bestval <span class="token operator">=</span> <span class="token operator">-</span>INF<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> child <span class="token operator">:</span> current<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ret <span class="token operator">=</span> <span class="token function">minimax</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
            bestval <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>bestval<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bestval<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> child <span class="token operator">:</span> current<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            ret <span class="token operator">+=</span> child<span class="token punctuation">.</span><span class="token function">prob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> child<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="蒙特卡洛树搜索" tabindex="-1"><a class="header-anchor" href="#蒙特卡洛树搜索" aria-hidden="true">#</a> 蒙特卡洛树搜索</h2><p>// TODO</p>`,11);function r(d,k){return t(),p("div",null,[c(" more "),i,l,u])}const h=e(o,[["render",r],["__file","game_adversarial_searching.html.vue"]]);export{h as default};
