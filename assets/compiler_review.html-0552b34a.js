import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as l,e as a}from"./app-fa77f3c6.js";const r={},t=a('<h1 id="编译原理复习" tabindex="-1"><a class="header-anchor" href="#编译原理复习" aria-hidden="true">#</a> 编译原理复习</h1><h2 id="一-概论" tabindex="-1"><a class="header-anchor" href="#一-概论" aria-hidden="true">#</a> 一 概论</h2><h3 id="_1-1-编译器结构" tabindex="-1"><a class="header-anchor" href="#_1-1-编译器结构" aria-hidden="true">#</a> 1.1 编译器结构</h3><p>编译器分为 前端 和 后端。</p><ul><li>前端： <ul><li>负责分析源程序，获取源程序的语法结构，并据此生成中间代码。</li><li>将源程序中的相关信息放入符号表</li><li>分析语法和语义，定位语法和语义错误</li><li>与机器无关</li></ul></li><li>后端 <ul><li>根据符号表和中间表示构造目标程序</li><li>与机器相关</li></ul></li></ul><h3 id="_1-2-编译过程" tabindex="-1"><a class="header-anchor" href="#_1-2-编译过程" aria-hidden="true">#</a> 1.2 编译过程</h3><ul><li>词法分析：字符流 -&gt; 符号流</li><li>语法分析：符号流 -&gt; 语法树</li><li>语义分析</li><li>中间代码生成：语法树-&gt;中间表示形式</li><li>机器无关优化</li><li>最终代码生成：中间表示形式-&gt;目标机器语言</li><li>机器相关优化</li></ul><p>上述过程中还会构建 <strong>符号表</strong>，由各个步骤使用；</p><p>符号表负责记录源程序中使用的变量的各种属性：</p><ul><li>名字</li><li>类型</li><li>作用域</li><li>函数的参数数量、参数类型等</li></ul><h3 id="_1-3-词法分析概述" tabindex="-1"><a class="header-anchor" href="#_1-3-词法分析概述" aria-hidden="true">#</a> 1.3 词法分析概述</h3><p>词法分析负责读入字符流，产生有意义的 <strong>词素</strong>；基于词素产生 <strong>词法单元</strong>。</p><p>每个词法单元有类似于<code>&lt;token_name, attribute_value&gt;</code>的形式；其中<code>token_name</code>在语法分析中使用；<code>attribute_value</code>指向对应的 <strong>符号表条目</strong>。</p>',13),o=[t];function n(d,c){return e(),l("div",null,o)}const _=i(r,[["render",n],["__file","compiler_review.html.vue"]]);export{_ as default};
