import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as t,e,a,b as s}from"./app-d34e76d6.js";const n={},r=e('<h1 id="_2024-春-互联网计算-课程笔记" tabindex="-1"><a class="header-anchor" href="#_2024-春-互联网计算-课程笔记" aria-hidden="true">#</a> 2024 春 互联网计算 课程笔记</h1><h2 id="第一章-计算机网络与因特网" tabindex="-1"><a class="header-anchor" href="#第一章-计算机网络与因特网" aria-hidden="true">#</a> 第一章 计算机网络与因特网</h2><h3 id="_1-什么是主机-什么是端系统" tabindex="-1"><a class="header-anchor" href="#_1-什么是主机-什么是端系统" aria-hidden="true">#</a> 1 什么是主机？什么是端系统？</h3><p><strong>所有连接到因特网的设备</strong>都称为主机或端系统。</p><h3 id="_2-什么是分组-什么是协议" tabindex="-1"><a class="header-anchor" href="#_2-什么是分组-什么是协议" aria-hidden="true">#</a> 2 什么是分组？什么是协议？</h3><p>当一台端系统要向另一台端系统发送数据时，发送端系统将数据分段并为每段数据加上首部字节。这样<strong>包含首部字节的的数据包</strong>称为分组。</p><p>协议(protocol)定义了在两个或多个通信实体之间交换的报文的格式和顺序，以及报文发送和／或接收一条报文或其他事件所采取的动作。</p><h3 id="_3-什么是客户、服务器" tabindex="-1"><a class="header-anchor" href="#_3-什么是客户、服务器" aria-hidden="true">#</a> 3 什么是客户、服务器？</h3><p>客户和服务器是两种不同类型的主机；客户一般是桌面 PC、移动 PC 和智能手机等，而服务器通常是更为强大的计算机。</p><h3 id="_4-电路交换、分组交换及对比" tabindex="-1"><a class="header-anchor" href="#_4-电路交换、分组交换及对比" aria-hidden="true">#</a> 4 电路交换、分组交换及对比</h3><p>通过网络链路和交换机传输数据有两种基本方法：分组交换和电路交换。</p><h4 id="分组交换" tabindex="-1"><a class="header-anchor" href="#分组交换" aria-hidden="true">#</a> 分组交换</h4><p>报文分组(packet)通过通信链路和**分组交换机(packet switch)**传送。</p><p>分组交换机主要有两类： <strong>路由器</strong> 和 <strong>链路层交换机</strong>。</p><p>大多数分组交换机在链路的输入端使用 <strong>存储转发传输(store-and-forward transmission)</strong>。这种机制使得交换机在开始分组的转发之前<strong>必须先接收到整个分组的内容</strong>。</p>',15),h=a("div",{class:"hint-container note"},[a("p",{class:"hint-container-title"},"注"),a("p",null,[s("通过"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"N")]),a("annotation",{encoding:"application/x-tex"},"N")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])]),s("条速率均为"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"R")]),a("annotation",{encoding:"application/x-tex"},"R")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R")])])]),s("的链路串联组成的路径发送一个长度为"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"L")]),a("annotation",{encoding:"application/x-tex"},"L")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal"},"L")])])]),s("的分组，端到端时延为")]),a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("msub",null,[a("mi",null,"d"),a("mrow",null,[a("mi",null,"p"),a("mn",null,"2"),a("mi",null,"p")])]),a("mo",null,"="),a("mi",null,"N"),a("mfrac",null,[a("mi",null,"L"),a("mi",null,"R")])]),a("annotation",{encoding:"application/x-tex"}," d_{p2p} = N \\frac{L}{R} ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.9805em","vertical-align":"-0.2861em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"d"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.3011em"}},[a("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mathnormal mtight"},"p"),a("span",{class:"mord mtight"},"2"),a("span",{class:"mord mathnormal mtight"},"p")])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.2861em"}},[a("span")])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"2.0463em","vertical-align":"-0.686em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),a("span",{class:"mord"},[a("span",{class:"mopen nulldelimiter"}),a("span",{class:"mfrac"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"1.3603em"}},[a("span",{style:{top:"-2.314em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R")])]),a("span",{style:{top:"-3.23em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),a("span",{style:{top:"-3.677em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"L")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.686em"}},[a("span")])])])]),a("span",{class:"mclose nulldelimiter"})])])])])])])],-1),d=e('<p>此外，在网络较拥堵的情况下，分组交换还可能出现因为传输速率较低而导致的排队时延，和分组交换机缓存有限而出现的丢包。</p><div class="hint-container note"><p class="hint-container-title">转发表</p><p>每台路由器都拥有一个转发表，其中存储了数个(IP 地址，出链路)对，用于搜索转发分组的出链路。</p></div><h4 id="电路交换" tabindex="-1"><a class="header-anchor" href="#电路交换" aria-hidden="true">#</a> 电路交换</h4><p>电路交换在两个端系统进行通信期间，预留了通信所需要的资源（带宽等），并为之建立一条专门的连接。</p><p>电路交换网络中有两种复用形式， <strong>频分复用(FDM)<strong>和</strong>时分复用(TDM)</strong>.</p><p>对于 FDM，链路为每条链接专用一个频段。这个频段的宽度称为带宽。</p><p>对于 TDM，时间被划分为固定大小的时间帧，每个时间帧又被划分为等大小的若干时隙。当建立连接时，网络为该条链接指定每一帧中一个特定的时隙。</p><h4 id="分组交换与电路交换的对比" tabindex="-1"><a class="header-anchor" href="#分组交换与电路交换的对比" aria-hidden="true">#</a> 分组交换与电路交换的对比</h4><ul><li>分组交换 <ul><li>优点 <ul><li>带宽共享效率高于电路交换</li><li>灵活性强</li><li>比电路交换更加简单有效，成本更低</li></ul></li><li>缺点 <ul><li>端到端时延不确定</li><li>传输可靠性较低</li></ul></li></ul></li><li>电路交换 <ul><li>优点 <ul><li>端到端时延很小</li><li>连接稳定，不存在丢包、失序问题</li><li>连接建立之后可以随时进行通信，实时性强</li><li>既适用于传输模拟信号，也适用于传输数字信号</li><li>设备控制比较简单</li></ul></li><li>缺点 <ul><li>带宽共享效率低</li><li>灵活性差</li><li>成本较高</li></ul></li></ul></li></ul><h3 id="_5-节点处理时延、排队时延、传输时延、传播时延、吞吐量" tabindex="-1"><a class="header-anchor" href="#_5-节点处理时延、排队时延、传输时延、传播时延、吞吐量" aria-hidden="true">#</a> 5 节点处理时延、排队时延、传输时延、传播时延、吞吐量</h3><h4 id="时延" tabindex="-1"><a class="header-anchor" href="#时延" aria-hidden="true">#</a> 时延</h4><ul><li>节点处理时延：路由器检查分组首部，并决定将分组导向何处所需要的时间（也可能包括检查错误的时间）</li><li>排队时延：分组在等待需要使用的链路传输其他分组所需要的时间</li><li>传输时延：分组在某条链路上传输所需要的时间（分组从路由器中被推出的时间按）</li><li>传播时延：分组中每个比特从链路起点到下一个路由器传播的时间。传播速率一般接近光速。</li><li><strong>某个节点的总时延等于上述时延的总和</strong>。</li></ul><h4 id="吞吐量" tabindex="-1"><a class="header-anchor" href="#吞吐量" aria-hidden="true">#</a> 吞吐量</h4><ul><li>瞬时吞吐量：在某一时刻某个主机接收文件的速率。</li><li>平均吞吐量：某个主机在某一段时间内接收数据的量和时间的比值。</li><li>一般来说，某台主机通过某条链路接收数据的吞吐量取决于链路各个环节吞吐量中的最小值（瓶颈链路）。</li></ul><h3 id="_6-因特网协议栈" tabindex="-1"><a class="header-anchor" href="#_6-因特网协议栈" aria-hidden="true">#</a> 6 因特网协议栈</h3><h4 id="应用层" tabindex="-1"><a class="header-anchor" href="#应用层" aria-hidden="true">#</a> 应用层</h4><p>包含网络应用程序和它们的应用层协议，如 HTTP, SMTP, FTP, DNS 等。</p><p>应用层协议分布在多个端系统上；多个端系统上的应用程序之间使用应用协议交换信息分组。</p><p>这种位于应用层的信息分组称为 <strong>报文(message)</strong>.</p><h4 id="运输层" tabindex="-1"><a class="header-anchor" href="#运输层" aria-hidden="true">#</a> 运输层</h4><p>运输层在应用程序端点之间传送应用层报文。因特网中的运输协议有两种，TCP（确保传递，有流量和拥塞控制）和 UDP（不确保传递，没有流量和拥塞控制）。</p><p>这种位于运输层的信息分组称为 <strong>报文段(segment)</strong>.</p><h4 id="网络层" tabindex="-1"><a class="header-anchor" href="#网络层" aria-hidden="true">#</a> 网络层</h4><p>位于网络层的信息分组称为 <strong>数据报(datagram)</strong>.</p><p>运输层协议会将运输层报文段和目的地址递交给网络层，由网络层负责运输。</p><p>网络层包括网际协议 <strong>IP</strong>。IP 协议定义了数据报中的各个字段和作用。</p><h4 id="链路层" tabindex="-1"><a class="header-anchor" href="#链路层" aria-hidden="true">#</a> 链路层</h4><p>链路层负责将网络层的数据报从网络中的一个节点移动到路径上的下一个节点。</p><p>网络层负责端系统到端系统的可靠传输，而链路层负责一段链路上的两个节点之间的可靠传输。</p><p>位于链路层的信息分组称为 <strong>帧(frame)</strong>.</p><h4 id="物理层" tabindex="-1"><a class="header-anchor" href="#物理层" aria-hidden="true">#</a> 物理层</h4><p>物理层负责将链路层帧的每个比特从一个节点移动到下一个节点。</p><h2 id="第二章-应用层" tabindex="-1"><a class="header-anchor" href="#第二章-应用层" aria-hidden="true">#</a> 第二章 应用层</h2><h3 id="_1-应用程序体系结构" tabindex="-1"><a class="header-anchor" href="#_1-应用程序体系结构" aria-hidden="true">#</a> 1 应用程序体系结构</h3><p>现代网络应用程序通常有两种体系结构： <strong>客户-服务器体系结构</strong> 和 <strong>对等(P2P)体系结构</strong>.</p><h4 id="客户-服务器体系结构" tabindex="-1"><a class="header-anchor" href="#客户-服务器体系结构" aria-hidden="true">#</a> 客户-服务器体系结构</h4><p>在 客户-服务器体系结构 中，有一个总是打开的主机，称为 <strong>服务器</strong>。它服务于来自其他许多主机（称为 <strong>客户</strong> ）的请求。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>在客户-服务器体系结构中，</p><ul><li>客户之间并不直接互相沟通。</li><li>服务器有一个固定、周知的 IP 地址。</li></ul></div><p>采用客户-服务器体系结构的典型应用程序有 FTP, Web, Telnet 和电子邮件。</p><h4 id="对等体系结构" tabindex="-1"><a class="header-anchor" href="#对等体系结构" aria-hidden="true">#</a> 对等体系结构</h4><p>在 对等体系结构 中，应用程序在 <em>间断连接的主机对</em> 之间使用直接通信。 这些主机对被称为 对等方(peer).</p><p>这种对等方通信不需要通过专门的服务器。</p><p>在应用对等体系结构的网络程序中，通常会有服务器被用于跟踪用户的 IP 地址；但用户到用户的数据不需要通过中间服务器发送。</p><p>采用对等体系结构的典型应用程序有 文件共享(BitTorrent)，P2P 下载器，网络电话和视频会议。</p><p>P2P 体系结构的最大特性是 <strong>自扩展性</strong>。</p><h3 id="_2-tcp-和-udp-的区别" tabindex="-1"><a class="header-anchor" href="#_2-tcp-和-udp-的区别" aria-hidden="true">#</a> 2 TCP 和 UDP 的区别</h3><ul><li>TCP 提供面向连接的服务和可靠的数据传输服务——一条 TCP 连接是 全双工（可同时双向传输） 且 可靠（保证送达） 的。</li><li>TCP 还提供拥塞和流量控制。</li><li>UDP 只提供一种不可靠的数据传输服务，它不保证报文能够到达接收方，也不保证接收方接受的报文都是有序的。</li></ul><h3 id="_3-http" tabindex="-1"><a class="header-anchor" href="#_3-http" aria-hidden="true">#</a> 3 HTTP</h3><p>HTTP(HyperText Transfer Protocol, 超文本传输协议) 是 Web 的应用层协议，也是 Web 的核心。</p><p>HTTP 由两个程序实现：一个客户程序和一个服务器程序，它们通过交换 HTTP 报文进行会话。</p><p>HTTP 使用 TCP 作为运输协议。</p><p>首先，HTTP 客户端先发起一个和服务器的 TCP 连接；在连接建立之后，客户会通过自身的 TCP 套接字向服务器发送 HTTP 请求报文和接收 HTTP 响应报文，服务器也通过自身的套接字接受请求报文，发送响应报文。</p><p>HTTP 本身是一个无状态协议；它不会保存关于客户的任何信息，而是使用 cookie 来保存用户的相关信息。</p><div class="hint-container note"><p class="hint-container-title">关于 URL</p><p>每个 URL 由两部分组成： <strong>存放对象的服务器主机名</strong> 和 <strong>对象的路径名</strong>。</p><p>例如，<code>https://yafengnju.github.io/InternetComputing/%E6%80%BB%E5%A4%8D%E4%B9%A0.pdf</code>中，<code>https://yafengnju.github.io</code>就是主机名，而<code>/InternetComputing/%E6%80%BB%E5%A4%8D%E4%B9%A0.pdf</code>就是对象的路径。</p></div><h3 id="_4-因特网电子邮件" tabindex="-1"><a class="header-anchor" href="#_4-因特网电子邮件" aria-hidden="true">#</a> 4 因特网电子邮件</h3><p>电子邮件系统一般由三部分组成：</p><ul><li>用户代理</li><li>邮件服务器</li><li>简单邮件传输协议(SMTP)</li></ul><p>用户通过 <strong>用户代理</strong> 来将邮件发送到接收方的邮件服务器上，和从自己的邮件服务器上获取发给自己的邮件；</p><p>邮件服务器负责将发送方的报文发送给接收方的邮件服务器。</p><p>如果发送方的邮件服务器不能将邮件交付给接收方的邮件服务器（比如接收方的邮件服务器发生了故障），那么它会将这封邮件保存在一个报文队列中并再次尝试发送。如果多次发送均失败，发送方的邮件服务器则会通过电子邮件的形式通知发送方。</p><h4 id="smtp-的基本操作" tabindex="-1"><a class="header-anchor" href="#smtp-的基本操作" aria-hidden="true">#</a> SMTP 的基本操作</h4><ul><li>发送方调用邮件代理程序并提供接收方的邮件地址，编写报文，然后通过用户代理发送报文。</li><li>发送方的用户代理将报文发送至发送方的邮件服务器，并被放在报文队列中。</li><li>发送方的邮件服务器上的 SMTP 客户端发现了该报文，并创建一条到接收方邮件服务器的 SMTP 服务器的 TCP 连接。</li><li>经过 SMTP 握手后，发送方服务器通过该 TCP 连接发送报文。</li><li>接收方邮件服务器接收该报文，并放入接收方邮箱中。</li><li>接收方调用用户代理阅读这条报文。</li></ul><h3 id="_5-推协议和拉协议" tabindex="-1"><a class="header-anchor" href="#_5-推协议和拉协议" aria-hidden="true">#</a> 5 推协议和拉协议</h3><p>如果一个协议中 TCP 连接是想要接收文件的主机发起的，那么这个协议就是拉协议。反之，如果一个协议中 TCP 连接是由想要发送文件的主机发起的，那么这个协议就是推协议。</p><h3 id="_6-域名系统-dns" tabindex="-1"><a class="header-anchor" href="#_6-域名系统-dns" aria-hidden="true">#</a> 6 域名系统(DNS)</h3><p>一台因特网上的主机既可以用 IP 地址进行标识，也可以用 <strong>主机名</strong> 进行标识。</p><p>DNS 的作用：</p><ul><li>将便于识记的主机名转换为便于路由器使用的 IP 地址。</li><li>提供主机别名（将多个主机名解析到同一个 IP 地址）。</li><li>提供邮件服务器别名。</li><li>负载分配（将对于部署在多个主机上的繁忙网站的请求解析到不同的主机上）。</li></ul><p>DNS 由两部分组成：</p><ul><li>一个由分层的 DNS 服务器实现的分布式数据库</li><li>一个使得主机能够查询上述数据库的 <strong>应用层协议</strong></li></ul><h4 id="分布式-dns-服务器" tabindex="-1"><a class="header-anchor" href="#分布式-dns-服务器" aria-hidden="true">#</a> 分布式 DNS 服务器</h4><p>DNS 服务器一般分为如下几种：</p><ul><li>根 DNS 服务器 <ul><li>提供顶级域 DNS 服务器的 IP 地址。</li></ul></li><li>顶级域(TLD) DNS 服务器 <ul><li>负责各个顶级域名和国家的顶级域名，如<code>.com</code>, <code>.org</code>, <code>.edu</code>, <code>.uk</code>等。</li><li>提供权威 DNS 服务器的 IP 地址。</li></ul></li><li>权威 DNS 服务器 <ul><li>负责 <strong>某个组织机构</strong> 的 <strong>公共可访问主机</strong> 的域名解析。</li></ul></li><li><em>本地 DNS 服务器</em><ul><li>不属于 DNS 服务器的层次结构</li><li>每个 ISP 都拥有自己的本地 DNS 服务器。</li><li>负责代理本地主机的 DNS 请求。</li></ul></li></ul><h4 id="递归查询和迭代查询" tabindex="-1"><a class="header-anchor" href="#递归查询和迭代查询" aria-hidden="true">#</a> 递归查询和迭代查询</h4><ul><li>递归查询：每一级 DNS 服务器都以自身的名义去查询自己的上一级服务器，在得到 DNS 结果后将回复层层向下传递。</li><li>迭代查询：某个主机（或服务器）不断地向不同的 DNS 服务器查询下一个需要查询的 DNS 服务器，直到获得 DNS 结果为止。</li></ul><h2 id="第三章-运输层" tabindex="-1"><a class="header-anchor" href="#第三章-运输层" aria-hidden="true">#</a> 第三章 运输层</h2><h3 id="多路复用、多路分解" tabindex="-1"><a class="header-anchor" href="#多路复用、多路分解" aria-hidden="true">#</a> 多路复用、多路分解</h3>',77),p=[r,h,d];function o(c,m){return i(),t("div",null,p)}const x=l(n,[["render",o],["__file","computer_network_notes.html.vue"]]);export{x as default};
